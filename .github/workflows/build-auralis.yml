name: Build Auralis OS - Void Linux + Clear Linux Optimizations
on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build Type'
        required: true
        default: 'ultimate'
        type: choice
        options:
        - ultimate
        - fallback
      enable_debug:
        description: 'Enable Debug Logging'
        required: false
        default: false
        type: boolean
  push:
    branches: [ main ]
    paths:
      - 'build-auralis.sh'
      - '.github/workflows/build-auralis.yml'
  pull_request:
    branches: [ main ]

env:
  AURALIS_VERSION: "1.0.0-beta"
  AURALIS_CODENAME: "Borealis"
  BUILD_TYPE: ${{ github.event.inputs.build_type || 'ultimate' }}
  DEBUG_MODE: ${{ github.event.inputs.enable_debug || 'false' }}

jobs:
  build-auralis-void-clear:
    runs-on: ubuntu-latest
    timeout-minutes: 420  # 7 hours max for Void + Clear Linux optimized build
    
    strategy:
      fail-fast: false
      
    steps:
    - name: 🚀 Checkout Auralis OS Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        
    - name: 🎯 Display Build Information
      run: |
        echo "🔥 AURALIS OS - VOID LINUX + CLEAR LINUX OPTIMIZATIONS"
        echo "======================================================"
        echo "📋 Build Configuration:"
        echo "  🏷️ Version: $AURALIS_VERSION ($AURALIS_CODENAME)"
        echo "  🎮 Build Type: $BUILD_TYPE"
        echo "  🐛 Debug Mode: $DEBUG_MODE"
        echo "  📅 Build Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "  🌐 Platform: GitHub Actions (Sequential)"
        echo "  💪 Runner: ubuntu-latest"
        echo ""
        echo "🎯 System Architecture:"
        echo "  📦 Base System: Void Linux (XBPS, runit, musl/glibc)"
        echo "  ⚡ Performance: Clear Linux inspired optimizations"
        echo "  🔥 Kernel: linux-zen + PREEMPT_RT + 2000 Hz + CONFIG_NO_HZ_IDLE"
        echo "  💻 Target: Intel CPU optimized"
        echo "  🧠 Strategy: Sequential Resource Management"
        echo ""
        
    - name: 🖥️ Show GitHub Actions Resources
      run: |
        echo "🖥️ GitHub Actions Build Resources:"
        echo "  💻 CPU Info: $(lscpu | grep 'Model name' | cut -d: -f2 | xargs)"
        echo "  🧠 CPU Cores: $(nproc)"
        echo "  🧠 RAM Total: $(free -h | grep '^Mem:' | awk '{print $2}')"
        echo "  🧠 RAM Available: $(free -h | grep '^Mem:' | awk '{print $7}')"
        echo "  💾 Disk Space: $(df -h / | tail -1 | awk '{print $4}') available"
        echo "  📊 Load Average: $(uptime | awk -F'load average:' '{print $2}')"
        echo "  🔧 Build Strategy: Sequential (Kernel → Cleanup → Void System)"
        echo ""
        
    - name: 🧹 Maximum Disk Space Cleanup
      run: |
        echo "🧹 Performing MAXIMUM disk space cleanup for Void + Clear Linux build..."
        
        # Show initial space
        echo "📊 Initial disk usage:"
        df -h /
        
        # Remove large unnecessary directories
        echo "🗑️ Removing unnecessary directories..."
        sudo rm -rf /usr/local/lib/android /opt/ghc /usr/local/.ghcup 2>/dev/null || true
        sudo rm -rf /usr/share/dotnet /opt/az /usr/local/share/boost 2>/dev/null || true
        sudo rm -rf /usr/local/lib/node_modules /opt/hostedtoolcache 2>/dev/null || true
        sudo rm -rf /usr/share/swift /usr/local/julia* 2>/dev/null || true
        
        # Clean package caches
        echo "🧽 Cleaning package caches..."
        sudo apt-get clean
        sudo apt-get autoremove -y
        
        # Clean Docker
        echo "🐳 Cleaning Docker system..."
        docker system prune -af 2>/dev/null || true
        
        # Clean snap packages
        echo "📦 Cleaning snap packages..."
        sudo snap list 2>/dev/null | awk 'NR>1{print $1}' | xargs -r sudo snap remove 2>/dev/null || true
        
        # Force filesystem cleanup
        echo "💾 Force filesystem cleanup..."
        sync
        sudo fstrim -av 2>/dev/null || true
        
        # Show final space
        echo "📊 Final disk usage after cleanup:"
        df -h /
        
        echo "✅ Disk space cleanup completed!"
        echo "🎯 Ready for Void Linux + Clear Linux optimized build!"
        
    - name: ⚡ Install Build Dependencies for Void + Clear Linux
      run: |
        echo "⚡ Installing build dependencies for Void + Clear Linux optimizations..."
        
        # Update package lists
        sudo apt-get update
        
        # Core build tools
        sudo apt-get install -y \
          build-essential git wget curl tar rsync \
          flex bison bc gawk perl python3 cpio time pv
        
        # Kernel build dependencies
        sudo apt-get install -y \
          libssl-dev libelf-dev libncurses-dev \
          dwarves pahole kmod
        
        # ISO creation tools
        sudo apt-get install -y \
          squashfs-tools genisoimage xorriso \
          debootstrap xz-utils
        
        # Clear Linux inspired performance tools
        sudo apt-get install -y \
          clang lld llvm \
          ccache \
          elfutils binutils-dev \
          schedtool \
          numactl
        
        # RT patch tools
        sudo apt-get install -y \
          quilt patch \
          libaudit-dev \
          libnuma-dev
        
        echo "✅ Build dependencies for Void + Clear Linux optimizations installed!"
        
    - name: 🔧 Setup ccache for Clear Linux Style Optimizations
      run: |
        echo "🔧 Setting up ccache with Clear Linux style optimizations..."
        
        # Configure ccache for maximum performance
        export CCACHE_DIR="/tmp/ccache"
        mkdir -p "$CCACHE_DIR"
        
        # Set aggressive ccache settings for Clear Linux style builds
        ccache -M 4G
        ccache --set-config=compression=true
        ccache --set-config=compression_level=6
        ccache --set-config=max_files=10000
        ccache --set-config=sloppiness=file_macro,locale,time_macros
        
        # Show ccache configuration
        echo "📊 ccache configuration:"
        ccache --show-config | head -20
        
        # Add ccache to PATH
        echo "/usr/lib/ccache" >> $GITHUB_PATH
        
        echo "✅ ccache configured for Clear Linux style optimizations!"
        
    - name: 🏗️ Verify Void + Clear Linux Build Script
      run: |
        echo "🏗️ Preparing Void Linux + Clear Linux optimized build script..."
        chmod +x build-auralis.sh
        
        # Verify script contains Void Linux and Clear Linux references
        echo "📋 Build script verification:"
        echo "  📄 File size: $(du -h build-auralis.sh | cut -f1)"
        echo "  📝 Lines: $(wc -l build-auralis.sh | cut -d' ' -f1)"
        
        # Check for key components
        if grep -q "Void Linux" build-auralis.sh; then
          echo "  ✅ Void Linux base system: CONFIRMED"
        else
          echo "  ⚠️ Warning: Void Linux references not found"
        fi
        
        if grep -q -i "clear.*linux\|clear.*opt" build-auralis.sh; then
          echo "  ✅ Clear Linux optimizations: CONFIRMED"
        else
          echo "  ⚠️ Warning: Clear Linux optimization references not found"
        fi
        
        if grep -q "CONFIG_NO_HZ_IDLE" build-auralis.sh; then
          echo "  ✅ CONFIG_NO_HZ_IDLE optimization: CONFIRMED"
        else
          echo "  ⚠️ Warning: CONFIG_NO_HZ_IDLE not found"
        fi
        
    - name: 🔥 Build Auralis OS - Void Linux + Clear Linux Optimizations
      id: build
      run: |
        echo "🔥 STARTING AURALIS OS BUILD!"
        echo "================================"
        echo "🎯 Void Linux + Clear Linux Optimizations"
        echo ""
        echo "🎯 Build Features:"
        echo "  📦 Base: Void Linux (XBPS package manager, runit init)"
        echo "  ⚡ Optimizations: Clear Linux inspired performance techniques"
        echo "  🔥 Kernel: linux-zen + PREEMPT_RT + 2000 Hz + CONFIG_NO_HZ_IDLE"
        echo "  🌟 Browser: Zen Browser with gorgeous aesthetics"
        echo "  💻 CPU Target: Intel optimized"
        echo "  🧠 Strategy: Sequential resource management"
        echo ""
        echo "⏰ Expected timeline:"
        echo "  📊 Phase 1 (Kernel): 45-90 minutes"
        echo "  🧹 Phase 2 (Cleanup): 5 minutes"
        echo "  🏗️ Phase 3 (Void System): 15-30 minutes"
        echo ""
        echo "🚀 Starting Void + Clear Linux optimized build..."
        
        # Set build environment variables
        export BUILD_START_TIME=$(date +%s)
        
        # Enable debug mode if requested
        if [ "$DEBUG_MODE" = "true" ]; then
          echo "🐛 Debug mode enabled - verbose logging activated"
          set -x
        fi
        
        # Run the Void + Clear Linux optimized build
        if ./build-auralis.sh; then
          echo "build_success=true" >> $GITHUB_OUTPUT
          echo ""
          echo "🎉 AURALIS OS BUILD COMPLETED!"
          echo "🎯 Void Linux + Clear Linux optimizations successfully applied!"
          
          # Calculate build time
          BUILD_END_TIME=$(date +%s)
          BUILD_DURATION=$((BUILD_END_TIME - BUILD_START_TIME))
          BUILD_HOURS=$((BUILD_DURATION / 3600))
          BUILD_MINUTES=$(((BUILD_DURATION % 3600) / 60))
          
          echo "⏱️ Total build time: ${BUILD_HOURS}h ${BUILD_MINUTES}m"
          echo "build_duration=${BUILD_DURATION}" >> $GITHUB_OUTPUT
          
        else
          echo "build_success=false" >> $GITHUB_OUTPUT
          echo "❌ Build failed - check logs for details"
          exit 1
        fi
        
    - name: 📊 Build Success Analysis
      if: steps.build.outputs.build_success == 'true'
      run: |
        echo "🎊 BUILD SUCCESS ANALYSIS"
        echo "========================"
        echo "🎯 Void Linux + Clear Linux Optimizations Build"
        echo ""
        
        # Check output directory
        if [ -d "/tmp/auralis-output" ]; then
          echo "📁 Build output analysis:"
          ls -la /tmp/auralis-output/
          
          # Check for ISO file
          if ls /tmp/auralis-output/*.iso 1> /dev/null 2>&1; then
            ISO_FILE=$(ls /tmp/auralis-output/*.iso | head -1)
            echo "💿 ISO created successfully:"
            echo "  📄 File: $(basename "$ISO_FILE")"
            echo "  📏 Size: $(du -h "$ISO_FILE" | cut -f1)"
            echo "  📦 Base: Void Linux"
            echo "  ⚡ Optimizations: Clear Linux techniques"
          else
            echo "⚠️ No ISO file found in output directory"
          fi
        else
          echo "❌ Output directory not found"
        fi
        
        # Check ccache statistics
        echo ""
        echo "🔧 ccache statistics (Clear Linux optimization):"
        ccache -s | head -10 || echo "ccache stats unavailable"
        
        # Check system resources after build
        echo ""
        echo "📊 Final system resources:"
        echo "  🧠 RAM usage: $(free -h | grep '^Mem:')"
        echo "  💾 Disk usage: $(df -h / | tail -1)"
        
    - name: 📦 Upload Auralis OS ISO (Void + Clear Linux)
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: auralis-os-${{ env.AURALIS_VERSION }}-${{ github.run_number }}
        path: /tmp/auralis-output/
        retention-days: 30
        compression-level: 6
        
    - name: 📋 Upload Build Logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-logs-${{ github.run_number }}
        path: |
          build.log
          kernel-build.log
          /tmp/ccache.log
        retention-days: 14
        
    - name: 🔧 Upload ccache Statistics
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ccache-stats-${{ github.run_number }}
        path: /tmp/ccache/
        retention-days: 7
        
    - name: 🎯 Void + Clear Linux Build Summary
      if: always()
      run: |
        echo ""
        echo "🎊 AURALIS OS BUILD SUMMARY"
        echo "============================"
        echo "🎯 Void Linux + Clear Linux Optimizations Edition"
        echo ""
        echo "📋 Build Information:"
        echo "  🏷️ Version: $AURALIS_VERSION ($AURALIS_CODENAME)"
        echo "  🎮 Build Type: $BUILD_TYPE"
        echo "  📅 Build Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "  🔄 Run Number: ${{ github.run_number }}"
        echo "  💪 Runner: GitHub Actions (ubuntu-latest)"
        echo ""
        echo "🎯 System Architecture:"
        echo "  📦 Base System: Void Linux"
        echo "    🔧 Package Manager: XBPS"
        echo "    🔄 Init System: runit"
        echo "    📚 C Library: musl/glibc"
        echo "  ⚡ Performance Optimizations: Clear Linux inspired"
        echo "    🏗️ Compiler: Clang + LTO + -O3 -march=native"
        echo "    💾 Memory: CONFIG_NO_HZ_IDLE + power efficiency"
        echo "    📊 Monitoring: PowerTOP, schedtool, cpupower"
        echo ""
        echo "🔥 Gaming Features:"
        echo "  🎮 Custom Kernel: linux-zen + PREEMPT_RT + 2000 Hz"
        echo "  🌟 Browser: Zen Browser (gorgeous aesthetics)"
        echo "  🎯 Gaming Stack: Steam, Lutris, GameMode, MangoHud"
        echo "  ⚡ Performance: zram, earlyoom, BBR, BFQ"
        echo "  💻 CPU Target: Intel optimized"
        echo "  🪟 Desktop: KDE Plasma gaming interface"
        echo ""
        echo "🔑 Default Credentials:"
        echo "  👤 Root: root / auralis"
        echo "  👤 User: auralis / auralis"
        echo ""
        echo "🚀 Key Commands:"
        echo "  🔥 Activate Gaming Mode: sudo auralis-ultimate-gaming-mode"
        echo "  📊 Power Analysis: sudo powertop"
        echo "  📦 Package Management: sudo xbps-install [package]"
        echo "  🔄 Service Management: sudo sv status [service]"
        echo ""
        
        # Build status
        if [ "${{ steps.build.outputs.build_success }}" = "true" ]; then
          echo "✅ BUILD STATUS: SUCCESS"
          echo "💿 Auralis OS (Void + Clear Linux optimizations) ISO ready!"
          echo "📥 Download from Artifacts section above"
          
          if [ -n "${{ steps.build.outputs.build_duration }}" ]; then
            duration=${{ steps.build.outputs.build_duration }}
            hours=$((duration / 3600))
            minutes=$(((duration % 3600) / 60))
            echo "⏱️ Build completed in: ${hours}h ${minutes}m"
          fi
        else
          echo "❌ BUILD STATUS: FAILED"
          echo "📋 Check build logs for details"
        fi
        
        echo ""
        echo "🌌 Auralis OS - The Ultimate Gaming Linux Distribution! 🌌"
        echo "🔥 Void Linux Simplicity + Clear Linux Performance = PERFECTION! 🔥"
        echo "🎯 Best of Both Worlds: Lightweight Base + Optimized Performance! 🎯"
        echo ""
        
    - name: 🐛 Debug Information (Void + Clear Linux)
      if: failure() && env.DEBUG_MODE == 'true'
      run: |
        echo "🐛 DEBUG INFORMATION - VOID + CLEAR LINUX BUILD FAILURE"
        echo "======================================================="
        echo ""
        
        # System information
        echo "🖥️ System Information:"
        uname -a
        lscpu | head -20
        free -h
        df -h
        
        # Check for Void Linux specific issues
        echo ""
        echo "📦 Void Linux Build Check:"
        
        if [ -d "/tmp/auralis-build" ]; then
          echo "✅ Build directory exists"
          ls -la /tmp/auralis-build/ | head -10
          
          if [ -d "/tmp/auralis-build/rootfs" ]; then
            echo "✅ Void Linux rootfs extracted"
            ls -la /tmp/auralis-build/rootfs/ | head -5
          else
            echo "❌ Void Linux rootfs not found"
          fi
        else
          echo "❌ Build directory missing"
        fi
        
        # Check for XBPS tools
        if command -v xbps-install >/dev/null; then
          echo "✅ XBPS tools available"
          xbps-install --version
        else
          echo "❌ XBPS tools not available"
        fi
        
        # Check ccache
        if command -v ccache >/dev/null; then
          echo "✅ ccache available (Clear Linux optimization)"
          ccache -s
        else
          echo "❌ ccache not available"
        fi
        
        # Check disk space issues
        echo ""
        echo "💾 Disk Space Analysis:"
        df -h
        du -sh /tmp/* 2>/dev/null | sort -hr | head -10 || true
        
        # Memory analysis
        echo ""
        echo "🧠 Memory Analysis:"
        free -h
        cat /proc/meminfo | head -10
        
    - name: 🧹 Cleanup Build Environment
      if: always()
      run: |
        echo "🧹 Cleaning up Void + Clear Linux build environment..."
        
        # Clean build directories
        sudo rm -rf /tmp/auralis-build /tmp/auralis-kernel-artifacts 2>/dev/null || true
        
        # Clean ccache
        ccache -C 2>/dev/null || true
        
        # Show final disk usage
        echo "📊 Final disk usage:"
        df -h /
        
        echo "✅ Build environment cleanup completed!"
        echo "🎯 Void Linux + Clear Linux optimized build process finished!"
